@using MFW.ProgressTracker.Enumerations

<div class="@InitializeCssClasses()" role="alert">
    @if (ShowIcon)
    {
        <Icon Name="ResolveIconName()" CssClass="me-2"/>
    }

    @ChildContent

    @if (Dismissible)
    {
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="@Constants.AriaClose"></button>
    }
</div>

@code {
    [Parameter, EditorRequired]
    public required RenderFragment ChildContent { get; init; }

    [Parameter, EditorRequired]
    public SemanticVariant Variant { get; init; }

    [Parameter]
    public bool ShowIcon { get; init; }

    [Parameter]
    public bool Dismissible { get; set; }

    [Parameter]
    public string? CssClass { get; init; }

    /// <summary>
    /// Initialize the required CSS classes for the alert component based on the given parameters.
    /// </summary>
    /// <returns>The CSS classes.</returns>
    private string InitializeCssClasses()
    {
        var cssClasses = $"alert alert-{Variant.ToString().ToLowerInvariant()}";

        if (Dismissible)
        {
            cssClasses += " alert-dismissible fade show";
        }

        if (string.IsNullOrWhiteSpace(CssClass))
        {
            return cssClasses;
        }

        return cssClasses + $" {CssClass.Trim()}";
    }

    /// <summary>
    /// Resolve the icon to be used for the icon component depending on the chosen variant.
    /// The info icon will be used by default.
    /// </summary>
    /// <returns>The icon to be used.</returns>
    private IconName ResolveIconName()
    {
        return Variant switch
        {
            SemanticVariant.Success => IconName.CheckCircleFill,
            SemanticVariant.Warning or SemanticVariant.Danger => IconName.ExclamationTriangleFill,
            _ => IconName.InfoCircleFill
        };
    }
}
